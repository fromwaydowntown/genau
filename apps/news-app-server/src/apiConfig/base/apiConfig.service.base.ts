/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ApiConfig as PrismaApiConfig } from "@prisma/client";

export class ApiConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApiConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.apiConfig.count(args);
  }

  async apiConfigs(
    args: Prisma.ApiConfigFindManyArgs
  ): Promise<PrismaApiConfig[]> {
    return this.prisma.apiConfig.findMany(args);
  }
  async apiConfig(
    args: Prisma.ApiConfigFindUniqueArgs
  ): Promise<PrismaApiConfig | null> {
    return this.prisma.apiConfig.findUnique(args);
  }
  async createApiConfig(
    args: Prisma.ApiConfigCreateArgs
  ): Promise<PrismaApiConfig> {
    return this.prisma.apiConfig.create(args);
  }
  async updateApiConfig(
    args: Prisma.ApiConfigUpdateArgs
  ): Promise<PrismaApiConfig> {
    return this.prisma.apiConfig.update(args);
  }
  async deleteApiConfig(
    args: Prisma.ApiConfigDeleteArgs
  ): Promise<PrismaApiConfig> {
    return this.prisma.apiConfig.delete(args);
  }
}
