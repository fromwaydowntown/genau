/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { NewsArticle } from "./NewsArticle";
import { NewsArticleCountArgs } from "./NewsArticleCountArgs";
import { NewsArticleFindManyArgs } from "./NewsArticleFindManyArgs";
import { NewsArticleFindUniqueArgs } from "./NewsArticleFindUniqueArgs";
import { CreateNewsArticleArgs } from "./CreateNewsArticleArgs";
import { UpdateNewsArticleArgs } from "./UpdateNewsArticleArgs";
import { DeleteNewsArticleArgs } from "./DeleteNewsArticleArgs";
import { TranslationRequestFindManyArgs } from "../../translationRequest/base/TranslationRequestFindManyArgs";
import { TranslationRequest } from "../../translationRequest/base/TranslationRequest";
import { NewsArticleService } from "../newsArticle.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => NewsArticle)
export class NewsArticleResolverBase {
  constructor(
    protected readonly service: NewsArticleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "read",
    possession: "any",
  })
  async _newsArticlesMeta(
    @graphql.Args() args: NewsArticleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [NewsArticle])
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "read",
    possession: "any",
  })
  async newsArticles(
    @graphql.Args() args: NewsArticleFindManyArgs
  ): Promise<NewsArticle[]> {
    return this.service.newsArticles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => NewsArticle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "read",
    possession: "own",
  })
  async newsArticle(
    @graphql.Args() args: NewsArticleFindUniqueArgs
  ): Promise<NewsArticle | null> {
    const result = await this.service.newsArticle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewsArticle)
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "create",
    possession: "any",
  })
  async createNewsArticle(
    @graphql.Args() args: CreateNewsArticleArgs
  ): Promise<NewsArticle> {
    return await this.service.createNewsArticle({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => NewsArticle)
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "update",
    possession: "any",
  })
  async updateNewsArticle(
    @graphql.Args() args: UpdateNewsArticleArgs
  ): Promise<NewsArticle | null> {
    try {
      return await this.service.updateNewsArticle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewsArticle)
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "delete",
    possession: "any",
  })
  async deleteNewsArticle(
    @graphql.Args() args: DeleteNewsArticleArgs
  ): Promise<NewsArticle | null> {
    try {
      return await this.service.deleteNewsArticle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TranslationRequest], {
    name: "translationRequests",
  })
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "read",
    possession: "any",
  })
  async findTranslationRequests(
    @graphql.Parent() parent: NewsArticle,
    @graphql.Args() args: TranslationRequestFindManyArgs
  ): Promise<TranslationRequest[]> {
    const results = await this.service.findTranslationRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
