/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NewsArticle as PrismaNewsArticle,
  TranslationRequest as PrismaTranslationRequest,
} from "@prisma/client";

export class NewsArticleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewsArticleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newsArticle.count(args);
  }

  async newsArticles(
    args: Prisma.NewsArticleFindManyArgs
  ): Promise<PrismaNewsArticle[]> {
    return this.prisma.newsArticle.findMany(args);
  }
  async newsArticle(
    args: Prisma.NewsArticleFindUniqueArgs
  ): Promise<PrismaNewsArticle | null> {
    return this.prisma.newsArticle.findUnique(args);
  }
  async createNewsArticle(
    args: Prisma.NewsArticleCreateArgs
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.create(args);
  }
  async updateNewsArticle(
    args: Prisma.NewsArticleUpdateArgs
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.update(args);
  }
  async deleteNewsArticle(
    args: Prisma.NewsArticleDeleteArgs
  ): Promise<PrismaNewsArticle> {
    return this.prisma.newsArticle.delete(args);
  }

  async findTranslationRequests(
    parentId: string,
    args: Prisma.TranslationRequestFindManyArgs
  ): Promise<PrismaTranslationRequest[]> {
    return this.prisma.newsArticle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .translationRequests(args);
  }
}
