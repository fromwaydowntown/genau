/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TranslationRequest } from "./TranslationRequest";
import { TranslationRequestCountArgs } from "./TranslationRequestCountArgs";
import { TranslationRequestFindManyArgs } from "./TranslationRequestFindManyArgs";
import { TranslationRequestFindUniqueArgs } from "./TranslationRequestFindUniqueArgs";
import { CreateTranslationRequestArgs } from "./CreateTranslationRequestArgs";
import { UpdateTranslationRequestArgs } from "./UpdateTranslationRequestArgs";
import { DeleteTranslationRequestArgs } from "./DeleteTranslationRequestArgs";
import { NewsArticle } from "../../newsArticle/base/NewsArticle";
import { User } from "../../user/base/User";
import { TranslationRequestService } from "../translationRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TranslationRequest)
export class TranslationRequestResolverBase {
  constructor(
    protected readonly service: TranslationRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "read",
    possession: "any",
  })
  async _translationRequestsMeta(
    @graphql.Args() args: TranslationRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TranslationRequest])
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "read",
    possession: "any",
  })
  async translationRequests(
    @graphql.Args() args: TranslationRequestFindManyArgs
  ): Promise<TranslationRequest[]> {
    return this.service.translationRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TranslationRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "read",
    possession: "own",
  })
  async translationRequest(
    @graphql.Args() args: TranslationRequestFindUniqueArgs
  ): Promise<TranslationRequest | null> {
    const result = await this.service.translationRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TranslationRequest)
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "create",
    possession: "any",
  })
  async createTranslationRequest(
    @graphql.Args() args: CreateTranslationRequestArgs
  ): Promise<TranslationRequest> {
    return await this.service.createTranslationRequest({
      ...args,
      data: {
        ...args.data,

        newsArticle: args.data.newsArticle
          ? {
              connect: args.data.newsArticle,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TranslationRequest)
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "update",
    possession: "any",
  })
  async updateTranslationRequest(
    @graphql.Args() args: UpdateTranslationRequestArgs
  ): Promise<TranslationRequest | null> {
    try {
      return await this.service.updateTranslationRequest({
        ...args,
        data: {
          ...args.data,

          newsArticle: args.data.newsArticle
            ? {
                connect: args.data.newsArticle,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TranslationRequest)
  @nestAccessControl.UseRoles({
    resource: "TranslationRequest",
    action: "delete",
    possession: "any",
  })
  async deleteTranslationRequest(
    @graphql.Args() args: DeleteTranslationRequestArgs
  ): Promise<TranslationRequest | null> {
    try {
      return await this.service.deleteTranslationRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => NewsArticle, {
    nullable: true,
    name: "newsArticle",
  })
  @nestAccessControl.UseRoles({
    resource: "NewsArticle",
    action: "read",
    possession: "any",
  })
  async getNewsArticle(
    @graphql.Parent() parent: TranslationRequest
  ): Promise<NewsArticle | null> {
    const result = await this.service.getNewsArticle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: TranslationRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
