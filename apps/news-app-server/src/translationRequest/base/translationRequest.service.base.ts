/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TranslationRequest as PrismaTranslationRequest,
  NewsArticle as PrismaNewsArticle,
  User as PrismaUser,
} from "@prisma/client";

export class TranslationRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TranslationRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.translationRequest.count(args);
  }

  async translationRequests(
    args: Prisma.TranslationRequestFindManyArgs
  ): Promise<PrismaTranslationRequest[]> {
    return this.prisma.translationRequest.findMany(args);
  }
  async translationRequest(
    args: Prisma.TranslationRequestFindUniqueArgs
  ): Promise<PrismaTranslationRequest | null> {
    return this.prisma.translationRequest.findUnique(args);
  }
  async createTranslationRequest(
    args: Prisma.TranslationRequestCreateArgs
  ): Promise<PrismaTranslationRequest> {
    return this.prisma.translationRequest.create(args);
  }
  async updateTranslationRequest(
    args: Prisma.TranslationRequestUpdateArgs
  ): Promise<PrismaTranslationRequest> {
    return this.prisma.translationRequest.update(args);
  }
  async deleteTranslationRequest(
    args: Prisma.TranslationRequestDeleteArgs
  ): Promise<PrismaTranslationRequest> {
    return this.prisma.translationRequest.delete(args);
  }

  async getNewsArticle(parentId: string): Promise<PrismaNewsArticle | null> {
    return this.prisma.translationRequest
      .findUnique({
        where: { id: parentId },
      })
      .newsArticle();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.translationRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
